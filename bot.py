from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from util import *


# —Ç—É—Ç –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –Ω–∞—à –∫–æ–¥ :)

async def start(update, context):
    dialog.mode = 'main'
    text = load_message('main')
    await send_photo(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞',
        'profile': '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé',
        'opener': '—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞',
        'message': '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà',
        'date': '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•',
        'gpt': '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†'
    })



async def gpt(update, context):
    dialog.mode = 'gpt'
    text = load_message('gpt')
    await send_photo(update, context, 'gpt')
    await send_text(update, context, text)



async def dialog_gpt(update, context):
    text = update.message.text
    promtt = load_prompt('gpt')
    me_message = await send_text(update, context, '–ß–∞—Ç üß† –¥—É–º–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... ')
    answer = await chat_gpt.send_question(promtt, text)
    await me_message.edit_text(answer)


async def message(update, context):
    dialog.mode = 'message'
    text = load_message('message')
    await send_photo(update, context, 'message')
    await send_text_buttons(update, context, text, {
      'message_next': '—Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      'message_date': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ'
            
    })
    dialog.list.clear()

async def message_buttom(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()
    
    prompt = load_prompt(query)
    user_chat_history = '\n\n'.join(dialog.list)
    me_message = await send_text(update, context, '–ß–∞—Ç üß† –¥—É–º–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å ')
    answer = await chat_gpt.send_question(prompt, user_chat_history)
    
    await me_message.edit_text(answer)
    

async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)


async def date(update, context):
    dialog.mode = 'date'
    text = load_message('date')
    await send_photo(update, context, 'date')
    await send_text_buttons(update, context, text, {
        'date_grande': '–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ üî•',
        'date_robbie': '–ú–∞—Ä–≥–æ –†–æ–±–±–∏ üî•üî•',
        'date_zendaya': '–ó–µ–Ω–¥–µ—è     üî•üî•üî•',
        'date_gosling': '–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥ üòé',
        'date_hardy': '–¢–æ–º –•–∞—Ä–¥–∏   üòéüòé'
        
    })


async def date_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, '–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...')
    answer = await chat_gpt.add_message(text)
    await my_message.edit_text(answer)


async def date_buttoms(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()
    
    await send_photo(update, context, query)
    await send_text(update, context, '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥–µ–≤—É—à–∫—É (–ø–∞—Ä–Ω—è) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π')
    
    prompt= load_prompt(query)
    chat_gpt.set_prompt(prompt)

async def profile(update, context):
    dialog.mode = 'profile'
    text = load_message('profile')
    await send_photo(update, context, 'profile')
    await send_text(update, context, text)
    
    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, '—Å–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç')

async def profile_dialog(update, context):
    text = update.message.text
    dialog.count += 1
    if dialog.count == 1:
        dialog.user['age'] = text
        await send_text(update, context, '–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?')
    elif dialog.count == 2:
        dialog.user['occupation'] = text
        await send_text(update, context, '–£ –í–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?')
    elif dialog.count == 3:
        dialog.user['hobbi'] = text
        await send_text(update, context, '–ß—Ç–æ –í–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö')
    elif dialog.count == 4:
        dialog.user['annoys'] = text
        await send_text(update, context, '–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?')
    elif dialog.count == 5:
        dialog.user['goals'] = text
        
        prompt =  load_prompt('profile')
        user_info = dialog_user_info_to_str(dialog.user)
        my_message = await send_text(update, context, '–ß–∞—Ç Gpt üß† –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å Tinder...')
        answer = await chat_gpt.send_question(prompt, user_info)
        await my_message.edit_text(answer)
    
 
async def opener(update, context):
    dialog.mode = 'opener'
    text = load_message('opener')
    await send_photo(update, context, 'opener')
    await send_text(update, context, text)
    
    dialog.user.clear()
    dialog.count = 0
    await send_text(update, context, '–ò–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞?')

async def opener_dialog(update, context):
    text = update.message.text
    dialog.count += 1   
    
    if dialog.count == 1:
        dialog.user['name'] = text
        await send_text(update, context, '–°–∫–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É –ª–µ—Ç?')
        
    elif dialog.count == 2:
        dialog.user['age'] = text
        await send_text(update, context, '–û—Ü–µ–Ω–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞: 1 - 10 –±–∞–ª–ª–æ–≤')
    elif dialog.count == 3:
        dialog.user['handsome'] = text
        await send_text(update, context, '–ì–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä?')
    elif dialog.count == 4:
        dialog.user['work'] = text
        await send_text(update, context, '–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?')
    elif dialog.count == 5:
        dialog.user['goals'] = text
        promt = load_prompt('opener')
        user_info = dialog_user_info_to_str(dialog.user)
        
        my_message = await send_text(update, context, '–ß–∞—Ç Gpt üß† –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞...')
        answer = await chat_gpt.send_question(promt, user_info)
        
        await my_message.edit_text(answer)
        
    
    
    
    
async def hello(update, context):
    if dialog.mode == 'gpt':
        await dialog_gpt(update, context)
    elif dialog.mode == 'date':
        await date_dialog(update, context)
    elif dialog.mode == 'message':
        await message_dialog(update, context)
    elif dialog.mode == 'profile':
        await profile_dialog(update, context)
    elif dialog.mode == 'opener':
        await opener_dialog(update, context)
    else:
        await send_text(update, context, '*–ü—Ä–∏–≤–µ—Ç*')
        await send_text(update, context, '_–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Ç–µ–±–µ?_')
        await send_text(update, context, '–í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —ç—Ç–æ? ' + update.message.text)
        await send_photo(update, context, "avatar_main")
        await send_text_buttons(update, context, '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', {
            'start': '–∑–∞–ø—É—Å—Ç–∏—Ç—å',
            'stop': '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'
        })


async def hello_buttoms(update, context):
    query = update.callback_query.data
    if query == "start":
        await send_text(update, context, '–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω')
    else:
        await send_text(update, context, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


dialog = Dialog()
dialog.mode = None
dialog.list =[]
dialog.count = 0
dialog.user = {}

chat_gpt = ChatGptService(token='gpt:HAQxPYQ23osmtp1E1FJuJFkblB3Tb5yvKv2J80LW8Ue2Hitv')

app = ApplicationBuilder().token("7447438390:AAFwMWQRvlWN0Ai0Al_Veg_EtWw-rf3Ad7o").build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('date', date))
app.add_handler(CommandHandler('message', message))
app.add_handler(CommandHandler('profile', profile))
app.add_handler(CommandHandler('opener', opener))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))
app.add_handler(CallbackQueryHandler(date_buttoms, pattern='^date_.*'))
app.add_handler(CallbackQueryHandler(message_buttom, pattern='^message_.*'))
app.add_handler(CallbackQueryHandler(hello_buttoms))
app.run_polling()
